name: pull_request_created
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches:
      - 'master'
      - 'main'
    paths-ignore:
      - '**/**.md' ### Do not run the workflow if Markdown files changed.
      - '.github/workflows/*' ### Do not run the workflow if files under path: .github/workflows/* changed.

  workflow_call:
    inputs:
      GO_VERSION:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: false
      GITGUARDIAN_API_KEY:
        required: false

jobs:
  check-secret:
    name: check if secrets are set
    runs-on: ubuntu-latest
    outputs:
      run-gitgardian: ${{ steps.check-secret-set.outputs.is-gitgardian-set }}
      run-snyk: ${{ steps.check-secret-set.outputs.is-snyk-set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: check-secret-set
        env:
            GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
            echo "is-gitgardian-set=${{ env.GITGUARDIAN_API_KEY != '' }}" >> $GITHUB_OUTPUT
            echo "is-snyk-set=${{ env.SNYK_TOKEN != '' }}" >> $GITHUB_OUTPUT

  pr-scanner:
    env:
       GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    runs-on: ubuntu-latest 
    needs: [check-secret]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # submodules: recursive
          
      - uses: actions/setup-go@v3
        name: Installing go
        with:
          go-version: ${{ inputs.GO_VERSION }}
          cache: true

      - name: Scanning - Forbidden Licenses (go-licenses)
        id: licenses-scan
        continue-on-error: true
        run: |
          echo "## Installing go-licenses tool"
          go install github.com/google/go-licenses@latest
          echo "## Scanning for forbiden licenses ##"
          go-licenses check .

      - name: Scanning - Credentials (GitGuardian)
        if: needs.check-secret.outputs.run-gitgardian == 'true'
        continue-on-error: true      
        id: credentials-scan
        uses: GitGuardian/ggshield/actions/secret@main        
        env:          
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}         
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}          
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}          
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}         
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Scanning - Vulnerabilities (Snyk)
        if: needs.check-secret.outputs.run-snyk == 'true'
        id: vulnerabilities-scan
        continue-on-error: true
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run unit test
        id: unit-test
        run: go test -v ./...

      - name: Go build
        id: build
        env:
          CGO_ENABLED: 0
        run: go build -v ./...

      - name: Comment results to PR
        uses: peter-evans/create-or-update-comment@v2
        continue-on-error: true # This step typically fails when opening PRs from forks 
        with:
          issue-number:  ${{ github.event.pull_request.number }}
          body: |
            Summary:
            - License scan: ${{ steps.licenses-scan.outcome }}
            - Credentials scan: ${{ steps.credentials-scan.outcome }}
            - Vulnerabilities scan: ${{ steps.vulnerabilities-scan.outcome }}
            - Unit test: ${{ steps.unit-test.outcome }}
            - Go build: ${{ steps.build.outcome }}
          reactions: 'eyes'